{"version":3,"sources":["Table/Table.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["keyCodes","left","up","right","down","Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","moveSnake","e","snakeDirection","keyCode","setState","state","snakeSegments","x","y","size","fruitSegments","snakeSize","_this2","setInterval","tick","document","addEventListener","item","some","segment","a","b","minRequiredDistance","Math","abs","doItemsCollide","concat","toConsumableArray","slice","createFruit","removeFruit","_this3","push","random","age","map","objectSpread","filter","value","_hasCollision","freshFruits","fruit","react_default","createElement","className","width","height","fill","stroke","cx","cy","r","Component","App","src","logo","alt","src_Table_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.df98274e.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nconst keyCodes = {\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n};\n\nfunction doItemsCollide(a, b) {\n    const minRequiredDistance = (a.size / 2) + (b.size / 2);\n\n    return Math.abs(a.x - b.x) < minRequiredDistance\n    && Math.abs(a.y - b.y) < minRequiredDistance;\n}\n\nclass Table extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          snakeSegments: [{x: 10, y: 50, size: 10}, {x: 20, y: 50, size: 10}, {x: 30, y: 50, size: 10}, {x: 40, y: 50, size: 10}, {x: 50, y: 50, size: 10}],\n          snakeDirection: [1, 0],\n          fruitSegments: []\n        };\n        this.snakeSize = 10;\n      }\n\n    moveSnake = (e) => {\n        let snakeDirection\n        switch(e.keyCode) {\n            case keyCodes.left:\n                snakeDirection = [-1, 0];\n                break;\n            case keyCodes.up:\n                snakeDirection = [0, -1];\n                break;\n            case keyCodes.right:\n                snakeDirection = [1, 0];\n                break;\n            case keyCodes.down:\n                snakeDirection = [0, 1];\n                break;\n            default:\n                snakeDirection = [-1, 0];\n                break;\n        }\n        this.setState({snakeDirection})\n    }\n      \n    componentDidMount() {\n        let timerID = setInterval(() => this.tick(), 200);\n        document.addEventListener('keydown', this.moveSnake)\n    }\n\n    _hasCollision(item) {\n        return this.state.snakeSegments.some(segment => doItemsCollide(item, segment));\n    }\n\n    tick() {\n        const snakeSegments = [\n            {x: (this.state.snakeSegments[0].x + this.snakeSize * this.state.snakeDirection[0] + 320) % 320, y: (this.state.snakeSegments[0].y + this.snakeSize * this.state.snakeDirection[1] + 240) % 240, size: this.state.snakeSegments[0].size},\n            ...this.state.snakeSegments.slice(0, -1)]\n        this.setState({\n            snakeSegments\n        });\n        this.createFruit()\n        this.removeFruit()\n    }\n\n    createFruit() {\n        const fruitSegments = [\n            ...this.state.fruitSegments\n        ]\n        fruitSegments.push(\n            {\n                x: Math.random() * 320, \n                y: Math.random() * 240,\n                age: 0,\n                size: 10,\n            }\n        );\n        this.setState({\n            fruitSegments: fruitSegments\n            .map(segment => (\n            {...segment, age: segment.age + 1}))\n            .filter((value) => !this._hasCollision(value))\n        })\n    }\n\n    removeFruit() {\n        const fruitSegments = [\n            ...this.state.fruitSegments\n        ]\n        const freshFruits = fruitSegments.filter((fruit) => fruit.age <= 40)\n        this.setState({fruitSegments: freshFruits})\n    }\n\n    render() {\n        return (\n            <div className=\"Table\">\n                <svg width=\"320\" height=\"240\">\n                    <rect width=\"320px\" height=\"240px\" fill=\"none\" stroke=\"black\" />\n                    {this.state.snakeSegments.map(segment => (\n                        <rect width=\"10px\" height=\"10px\" x={segment.x} y={segment.y} fill=\"black\" stroke=\"black\" />\n                    ))}\n                    {this.state.fruitSegments.map(segment => (\n                        <circle cx={segment.x} cy={segment.y} r=\"10\" fill=\"red\" />\n                    ))}\n                </svg>\n            </div>\n        )\n    }\n}\n\nexport default Table;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './Table/Table.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <div>\n          <Table />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}